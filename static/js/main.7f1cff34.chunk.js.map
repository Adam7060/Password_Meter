{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","color","setColor","progress","setProgress","validSpecial","e","a","i","length","includes","detectNumber","list","split","isNaN","className","type","onChange","handle","target","value","ProgressBar","variant","now","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA0EeA,MAtEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAa,SAACC,GAEhB,IADF,IAAMC,EAAI,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,KACzHC,EAAE,EAAIA,EAAED,EAAEE,OAAQD,IACzB,GAAIF,EAAEI,SAASH,EAAEC,IACf,OAAO,GAKTG,EAAa,SAACL,GAGhB,IADA,IAAMM,EAAKN,EAAEO,MAAM,IACVL,EAAG,EAAGA,GAAGI,EAAKH,OAAOD,IAC5B,IAAKM,MAAMF,EAAKJ,IACb,OAAO,EAGZ,OAAO,GA0BX,OACE,yBAAKO,UAAU,WAEb,oDAEA,2BAAOC,KAAK,WAAWC,SAAU,SAAAX,IA5BtB,SAACA,GACXA,EAAEG,QAAQ,GACXP,EAAS,UACTE,EAAY,IACTC,EAAaC,KACdJ,EAAS,WACTE,EAAY,KAEXO,EAAaL,KACdJ,EAAS,WACTE,EAAY,KAEXC,EAAaC,IAAMK,EAAaL,KACjCJ,EAAS,WACTE,EAAY,OAIdA,EAAY,GAU4Bc,CAAOZ,EAAEa,OAAOC,UAExD,yBAAKL,UAAU,eACZ,kBAACM,EAAA,EAAD,CAAaC,QAASrB,EAAOsB,IAAKpB,KAGrC,qCAEA,4BACE,kEACA,+DACA,8ECvDYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7f1cff34.chunk.js","sourcesContent":["import ProgressBar from 'react-bootstrap/ProgressBar'\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [color, setColor] = useState(\"\")\n  const [progress, setProgress] = useState(0)\n\n  const validSpecial=(e)=>{\n    const a = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"-\", \"_\", \"=\", \"+\", \".\", \"/\", \">\", \"<\", \"\\\\\", \"|\", \"'\", \";\", \":\", \" \", \"\\\"\"]\n      for (let i=0 ; i<a.length; i++){\n        if (e.includes(a[i])){\n          return true\n        }\n      }\n    }\n\n  const detectNumber=(e)=>{\n     // e.split('').find(x => !isNaN(x))\n      const list=e.split('')\n      for (let i =0; i<=list.length;i++){\n        if (!isNaN(list[i])){\n           return true\n          }\n        }\n      return false\n    }\n\n  const handle = (e) => {\n    if(e.length>=6){\n      setColor(\"danger\")\n      setProgress(33)\n      if(validSpecial(e)){\n        setColor(\"warning\")\n        setProgress(66)\n      }\n      if(detectNumber(e)){\n        setColor(\"warning\")\n        setProgress(66)\n      }\n      if(validSpecial(e) && detectNumber(e) ){\n        setColor(\"success\")\n        setProgress(100)\n      }\n    }\n    else {\n      setProgress(0)\n    }\n\n  }\n\n  return (\n    <div className=\"appmain\">\n\n      <h1>Hello Password Meter</h1>\n\n      <input type=\"password\" onChange={e => { handle(e.target.value) }} />\n\n      <div className=\"progressbar\">\n         <ProgressBar variant={color} now={progress} />\n      </div>\n\n      <h3>Note:</h3>\n\n      <ul>\n        <li>Must contain at least 6 characters</li>\n        <li>Must contain at least one digit</li>\n        <li>Must contain at least one special character</li>\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}